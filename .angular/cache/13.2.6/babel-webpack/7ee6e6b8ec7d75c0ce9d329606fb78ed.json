{"ast":null,"code":"import _asyncToGenerator from \"C:\\\\Users\\\\edwar\\\\OneDrive\\\\Desktop\\\\SoftwareDevelopment\\\\FinalProject\\\\team-the-code-experts-frontend\\\\node_modules\\\\@babel\\\\runtime\\\\helpers\\\\esm\\\\asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nlet PostComponent = class PostComponent {\n  constructor(http, // Build private HTTP client\n  router, // Build private router\n  postService, // Create post service\n  authService, // Create auth service\n  noPostsService, // Import no posts messages\n  votingService, // Import Voting service\n  flaggingService) {\n    this.http = http;\n    this.router = router;\n    this.postService = postService;\n    this.authService = authService;\n    this.noPostsService = noPostsService;\n    this.votingService = votingService;\n    this.flaggingService = flaggingService;\n    this.votes = 0;\n  }\n\n  ngOnInit() {\n    this.authService.loginStatus(); // Check if user is logged in, and handle accordingly\n\n    this.postType = this.type;\n\n    if (!this.posts) {\n      this.noPostsMessage = this.noPostsService.noPosts();\n    }\n  }\n\n  upvote(postID, appUser, voteArray) {\n    /**\r\n     * Upvote post\r\n     * If post already was upvoted by the user, remove vote\r\n     * Lastly, update vote count\r\n     */\n    if (voteArray == '' || voteArray == null) {\n      var mId = postID;\n      this.votingService.createMessageVote(mId).subscribe( /*#__PURE__*/function () {\n        var _ref = _asyncToGenerator(function* (response) {\n          console.log(response);\n        });\n\n        return function (_x) {\n          return _ref.apply(this, arguments);\n        };\n      }());\n    } else {\n      var vId = voteArray[0].voteId;\n      this.votingService.deleteMessageVote(vId, appUser).subscribe( /*#__PURE__*/function () {\n        var _ref2 = _asyncToGenerator(function* (response) {\n          console.log(response); //  this.posts = this.posts.filter(item=>item.messageId !== postID);\n        });\n\n        return function (_x2) {\n          return _ref2.apply(this, arguments);\n        };\n      }()); // this.votingService.upvote(postID, userID, voteArray);\n    }\n  }\n\n  downvote(postID, appUser, voteArray) {\n    /**\r\n     * Downvote post\r\n     * If post already was downvoted by the user, remove vote\r\n     * Lastly, update vote count\r\n     */\n    if (voteArray == '' || voteArray == null) {\n      var mId = postID;\n      this.votingService.createMessageDownVote(mId).subscribe( /*#__PURE__*/function () {\n        var _ref3 = _asyncToGenerator(function* (response) {\n          console.log(response);\n        });\n\n        return function (_x3) {\n          return _ref3.apply(this, arguments);\n        };\n      }());\n    } else {\n      var vId = voteArray[0].voteId;\n      this.votingService.deleteMessageVote(vId, appUser).subscribe( /*#__PURE__*/function () {\n        var _ref4 = _asyncToGenerator(function* (response) {\n          console.log(response); // this.votingService.downvote(postID);\n        });\n\n        return function (_x4) {\n          return _ref4.apply(this, arguments);\n        };\n      }());\n    }\n  }\n\n  flag(postID) {\n    /**\r\n     * Flag post\r\n     * If post is already flagged, remove flag\r\n     */\n    this.flaggingService.flag(postID);\n  }\n\n};\n\n__decorate([Input()], PostComponent.prototype, \"type\", void 0);\n\n__decorate([Input()], PostComponent.prototype, \"posts\", void 0);\n\nPostComponent = __decorate([Component({\n  selector: 'app-post',\n  templateUrl: './post.component.html',\n  styleUrls: ['./post.component.css']\n})], PostComponent);\nexport { PostComponent };","map":{"version":3,"sources":["C:/Users/edwar/OneDrive/Desktop/SoftwareDevelopment/FinalProject/team-the-code-experts-frontend/src/app/components/feed/post/post.component.ts"],"names":["__decorate","Component","Input","PostComponent","constructor","http","router","postService","authService","noPostsService","votingService","flaggingService","votes","ngOnInit","loginStatus","postType","type","posts","noPostsMessage","noPosts","upvote","postID","appUser","voteArray","mId","createMessageVote","subscribe","response","console","log","vId","voteId","deleteMessageVote","downvote","createMessageDownVote","flag","prototype","selector","templateUrl","styleUrls"],"mappings":"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","sourcesContent":["import { __decorate } from \"tslib\";\r\nimport { Component, Input } from '@angular/core';\r\nlet PostComponent = class PostComponent {\r\n    constructor(http, // Build private HTTP client\r\n    router, // Build private router\r\n    postService, // Create post service\r\n    authService, // Create auth service\r\n    noPostsService, // Import no posts messages\r\n    votingService, // Import Voting service\r\n    flaggingService) {\r\n        this.http = http;\r\n        this.router = router;\r\n        this.postService = postService;\r\n        this.authService = authService;\r\n        this.noPostsService = noPostsService;\r\n        this.votingService = votingService;\r\n        this.flaggingService = flaggingService;\r\n        this.votes = 0;\r\n    }\r\n    ngOnInit() {\r\n        this.authService.loginStatus(); // Check if user is logged in, and handle accordingly\r\n        this.postType = this.type;\r\n        if (!this.posts) {\r\n            this.noPostsMessage = this.noPostsService.noPosts();\r\n        }\r\n    }\r\n    upvote(postID, appUser, voteArray) {\r\n        /**\r\n         * Upvote post\r\n         * If post already was upvoted by the user, remove vote\r\n         * Lastly, update vote count\r\n         */\r\n        if (voteArray == '' || voteArray == null) {\r\n            var mId = postID;\r\n            this.votingService.createMessageVote(mId)\r\n                .subscribe(async (response) => {\r\n                console.log(response);\r\n            });\r\n        }\r\n        else {\r\n            var vId = voteArray[0].voteId;\r\n            this.votingService.deleteMessageVote(vId, appUser)\r\n                .subscribe(async (response) => {\r\n                console.log(response);\r\n                //  this.posts = this.posts.filter(item=>item.messageId !== postID);\r\n            });\r\n            // this.votingService.upvote(postID, userID, voteArray);\r\n        }\r\n    }\r\n    downvote(postID, appUser, voteArray) {\r\n        /**\r\n         * Downvote post\r\n         * If post already was downvoted by the user, remove vote\r\n         * Lastly, update vote count\r\n         */\r\n        if (voteArray == '' || voteArray == null) {\r\n            var mId = postID;\r\n            this.votingService.createMessageDownVote(mId)\r\n                .subscribe(async (response) => {\r\n                console.log(response);\r\n            });\r\n        }\r\n        else {\r\n            var vId = voteArray[0].voteId;\r\n            this.votingService.deleteMessageVote(vId, appUser)\r\n                .subscribe(async (response) => {\r\n                console.log(response);\r\n                // this.votingService.downvote(postID);\r\n            });\r\n        }\r\n    }\r\n    flag(postID) {\r\n        /**\r\n         * Flag post\r\n         * If post is already flagged, remove flag\r\n         */\r\n        this.flaggingService.flag(postID);\r\n    }\r\n};\r\n__decorate([\r\n    Input()\r\n], PostComponent.prototype, \"type\", void 0);\r\n__decorate([\r\n    Input()\r\n], PostComponent.prototype, \"posts\", void 0);\r\nPostComponent = __decorate([\r\n    Component({\r\n        selector: 'app-post',\r\n        templateUrl: './post.component.html',\r\n        styleUrls: ['./post.component.css']\r\n    })\r\n], PostComponent);\r\nexport { PostComponent };\r\n"]},"metadata":{},"sourceType":"module"}